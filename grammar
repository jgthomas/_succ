
<program> ::= { <function> | <function-prototype> | <declaration> }

<function> ::= <type> <id> "(" { <type> <id> } ")" "{" { <block-item> } "}"

<function-prototype> ::= <type> <id> "(" { <type> <id> } ")" ";"

<declaration> ::= <type> <id> [ "=" <expression> ] ";"

<block-item> ::= <statement> | <declaration>

<statement> ::= "return" <expression> ";"
              | "if" "(" <expression> ")" <statement> [ "else" <statement> ]
              | "for" "(" <expression-optional-semicolon> <expression-optional-semicolon> <expression-optional> ")" <statement> 
              | "for" "(" <declaration> <expression-optional-semicolon> <expression-optional> ")" <statement>
              | "while" "(" <expression> ")" <statement>
              | "do" <statement> "while" "(" <expression> ")" ";"
              | "break" ";"
              | "continue" ";"
              | <exp-option> ";"
              | "{" { <block-item> } "}"

<expression-optional> ::= <expression> | ""

<expression-optional-semicolon> ::= <expression> ";" | ";"

<expression> ::= <id> "=" <expression> | <conditional-expression>

<conditional-expression> ::= 

<term> ::= <factor> { ("*" | "\" | "%") <factor> }

<factor> ::= <int>
           | <id>
           | <unary-op> <factor>
           | "(" <expression> ")"

<unary-op> ::= "-" | "~" | "!"

<id> ::= <char> | <char> { <char> <digit> "_" }

<type> ::= <int>

<int> ::= <digit> | <digit> { <digit> }

<char> ::= a | b | c ... x | y | z

<digit> ::= 0 | 1 | 2 | 3 |4 | 5 | 6 | 7 | 8 | 9 
